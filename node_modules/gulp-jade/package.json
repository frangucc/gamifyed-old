{
  "name": "gulp-jade",
  "version": "0.9.0",
  "description": "Compile Jade templates",
  "keywords": [
    "jade",
    "gulpplugin",
    "stream",
    "compile"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/phated/gulp-jade.git"
  },
  "author": {
    "name": "Blaine Bublitz",
    "email": "blaine@iceddev.com"
  },
  "dependencies": {
    "gulp-util": "~2.2",
    "jade": "1.1 - 1.7",
    "through2": "^0.5.1"
  },
  "main": "index.js",
  "engines": {
    "node": ">= 0.10"
  },
  "scripts": {
    "test": "gulp jshint && tap ./test"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "devDependencies": {
    "gulp": "~3.4.0",
    "tap": "~0.4.6",
    "gulp-jshint": "~1.3.4"
  },
  "readme": "[![Build Status](https://travis-ci.org/phated/gulp-jade.png?branch=master)](https://travis-ci.org/phated/gulp-jade)\n\n## Information\n\n<table>\n<tr>\n<td>Package</td><td>gulp-jade</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Compile Jade templates</td>\n</tr>\n<tr>\n<td>Node Version</td>\n<td>â‰¥ 0.10</td>\n</tr>\n</table>\n\n## Usage\n\nCompile to HTML\n\n```javascript\nvar jade = require('gulp-jade');\n\ngulp.task('templates', function() {\n  var YOUR_LOCALS = {};\n\n  gulp.src('./lib/*.jade')\n    .pipe(jade({\n      locals: YOUR_LOCALS\n    }))\n    .pipe(gulp.dest('./dist/'))\n});\n```\n\nCompile to JS\n\n```javascript\nvar jade = require('gulp-jade');\n\ngulp.task('templates', function() {\n  gulp.src('./lib/*.jade')\n    .pipe(jade({\n      client: true\n    }))\n    .pipe(gulp.dest('./dist/'))\n});\n```\n\n## Options\n\nAll options supported by the [Jade API](http://jade-lang.com/api/) are supported\n\n__Note:__ `filename` option is taken from `path` property of incoming vinyl-file object. If you want to change it, use [gulp-rename](https://github.com/hparra/gulp-rename) before `gulp-jade` with desired path.\n\nIn addition, you can pass in a `locals` or `data` option that will be used as locals for your HTML compilation.  The `locals` option takes precedence over the `data` option.\n\n## AMD\n\nIf you are trying to wrap your Jade template functions in an AMD wrapper, use [`gulp-wrap-amd`](https://github.com/phated/gulp-wrap-amd)\n\n```javascript\nvar jade = require('gulp-jade');\nvar wrap = require('gulp-wrap-amd');\n\ngulp.task('templates', function() {\n  gulp.src('./lib/*.jade')\n    .pipe(jade({\n      client: true\n    }))\n    .pipe(wrap({\n      deps: ['jade'],\n      params: ['jade']\n    }))\n    .pipe(gulp.dest('./dist/'))\n});\n```\n\n## Use with [gulp-data](https://www.npmjs.org/package/gulp-data)\n\nAs an alternative, the ```gulp-data``` plugin, is a standard method for piping data down-stream to other plugins that need data in the form of a new file property ```file.data```. If you have data from a JSON file, front-matter, a database, or anything really, use ```gulp-data``` to pass that data to gulp-jade.\n\nRetrieve data from a JSON file, keyed on file name:\n\n```\nvar getJsonData = function(file, cb) {\n  var jsonPath = './examples/' + path.basename(file.path) + '.json';\n  cb(require(jsonPath));\n};\n\ngulp.task('json-test', function() {\n  return gulp.src('./examples/test1.html')\n    .pipe(data(getJsonData))\n    .pipe(jade())\n    .pipe(gulp.dest('build'));\n});\n```\n\nSince gulp-data provides a callback, it means you can get data from a database query as well:\n\n```\nvar getMongoData = function(file, cb) {\n  MongoClient.connect('mongodb://127.0.0.1:27017/gulp-data-test', function(err, db) {\n    var collection = db.collection('file-data-test');\n    collection.findOne({filename: path.basename(file.path)}, function(err, doc) {\n      db.close();\n      cb(doc);\n    });\n  });\n};\n\ngulp.task('db-test', function() {\n  return gulp.src('./examples/test3.html')\n    .pipe(data(getMongoData))\n    .pipe(jade())\n    .pipe(gulp.dest('build'));\n});\n````\n\nMore info on [gulp-data](https://www.npmjs.org/package/gulp-data)\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2013 Blaine Bublitz\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/phated/gulp-jade/issues"
  },
  "_id": "gulp-jade@0.9.0",
  "_from": "gulp-jade@"
}
